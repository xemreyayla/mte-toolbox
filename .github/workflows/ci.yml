name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*' # Sadece 'v1.2.3' gibi versiyon tag'leriyle Ã§alÄ±ÅŸÄ±r

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # GitHub Release oluÅŸturmak iÃ§in gerekli

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Git tag'lerini gÃ¶rebilmek iÃ§in tam geÃ§miÅŸ gerekir

      - name: Extract version from Git tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build Docker image and extract .deb package
        run: |
          echo "ðŸ”§ Versiyon: ${VERSION}"

          # Build Docker image (builder stage)
          docker build -t mte-toolbox-builder:${VERSION} .

          # Create a temporary container
          docker create --name mte_temp mte-toolbox-builder:${VERSION}

          # Copy debfile.txt from container
          # DÃ¼zeltildi: debfile.txt artÄ±k /build dizininde
          docker cp mte_temp:/build/debfile.txt ./debfile.txt

          # Read actual .deb filename
          DEB_FILE=$(cat debfile.txt)
          echo "Found .deb file: $DEB_FILE"

          # Export to env for later steps
          echo "DEB_FILE=$DEB_FILE" >> $GITHUB_ENV

          # Copy actual .deb file from container to host
          # DÃ¼zeltildi: .deb dosyasÄ± da /build dizininde
          docker cp mte_temp:/build/$DEB_FILE ./

          docker rm mte_temp

      - name: Upload .deb package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mte-toolbox-deb-package
          path: ${{ env.DEB_FILE }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Tag and push runtime Docker image
        run: |
          # Build runtime (final stage) Docker image
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mte-toolbox:${VERSION} --target final .

          # Tag as latest too
          docker tag ${{ secrets.DOCKER_USERNAME }}/mte-toolbox:${VERSION} ${{ secrets.DOCKER_USERNAME }}/mte-toolbox:latest

          # Push both tags
          docker push ${{ secrets.DOCKER_USERNAME }}/mte-toolbox:${VERSION}
          docker push ${{ secrets.DOCKER_USERNAME }}/mte-toolbox:latest

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.DEB_FILE }}
          generate_release_notes: true
