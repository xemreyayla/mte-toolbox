name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*' # Sadece 'v1.2.3' gibi versiyon tag'leriyle Ã§alÄ±ÅŸÄ±r

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # GitHub Release oluÅŸturmak iÃ§in gerekli

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Git tag'lerini gÃ¶rmek iÃ§in tam geÃ§miÅŸi Ã§ek

      - name: Extract version from Git tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v} # 'v' Ã¶nekini kaldÄ±r
          echo "VERSION=${VERSION}" >> $GITHUB_ENV # DiÄŸer adÄ±mlar iÃ§in ortam deÄŸiÅŸkeni ayarla
          echo "version=${VERSION}" >> $GITHUB_OUTPUT # Bu adÄ±mÄ±n Ã§Ä±ktÄ±sÄ± olarak da ayarla

      - name: Build Docker images and extract .deb package
        run: |
          echo "ğŸ”§ Versiyon: ${VERSION}"

          # Dockerfile'daki builder aÅŸamasÄ±nÄ± kullanarak derleme imajÄ±nÄ± oluÅŸtur.
          # Bu imaj, .deb paketini oluÅŸturmak iÃ§in kullanÄ±lÄ±r.
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mte-toolbox-builder:${VERSION} .

          # .deb paketini builder imajÄ±ndan runner ortamÄ±na kopyala
          docker create --name mte_temp_container ${{ secrets.DOCKER_USERNAME }}/mte-toolbox-builder:${VERSION}
          docker cp mte_temp_container:/app/build/*.deb .
          docker rm mte_temp_container

          # Kopyalanan .deb dosyasÄ±nÄ±n adÄ±nÄ± bul ve ortam deÄŸiÅŸkenine kaydet
          DEB_FILE=$(ls *.deb | head -n1)
          echo "DEB_FILE=${DEB_FILE}" >> $GITHUB_ENV

          # Dockerfile'daki final aÅŸamasÄ±nÄ± kullanarak uygulamanÄ±n Ã§alÄ±ÅŸma zamanÄ± imajÄ±nÄ± oluÅŸtur.
          # Bu imaj, uygulamanÄ±n Ã§alÄ±ÅŸtÄ±rÄ±lmasÄ± iÃ§in minimal baÄŸÄ±mlÄ±lÄ±klarÄ± iÃ§erir.
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mte-toolbox:${VERSION} --target final .

          # Ã‡alÄ±ÅŸma zamanÄ± imajÄ±nÄ± 'latest' etiketiyle de etiketle
          docker tag ${{ secrets.DOCKER_USERNAME }}/mte-toolbox:${VERSION} ${{ secrets.DOCKER_USERNAME }}/mte-toolbox:latest

      - name: Upload .deb package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mte-toolbox-deb-package
          path: ${{ env.DEB_FILE }} # Bulunan .deb dosyasÄ±nÄ± yÃ¼kle

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }} # Docker Hub API token'Ä± kullanÄ±yorsanÄ±z DOCKER_TOKEN
                                                # veya Docker Hub ÅŸifreniz ise DOCKER_PASSWORD

      - name: Push Docker images to Docker Hub
        run: |
          # Ä°steÄŸe baÄŸlÄ±: Builder imajÄ±nÄ± da Docker Hub'a push et
          docker push ${{ secrets.DOCKER_USERNAME }}/mte-toolbox-builder:${VERSION}
          
          # Ã‡alÄ±ÅŸma zamanÄ± imajÄ±nÄ± sÃ¼rÃ¼mlÃ¼ etiketiyle push et
          docker push ${{ secrets.DOCKER_USERNAME }}/mte-toolbox:${VERSION}
          
          # Ã‡alÄ±ÅŸma zamanÄ± imajÄ±nÄ± 'latest' etiketiyle push et
          docker push ${{ secrets.DOCKER_USERNAME }}/mte-toolbox:latest

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.DEB_FILE }} # .deb paketini release'e ekle
          generate_release_notes: true # Otomatik release notlarÄ± oluÅŸtur

